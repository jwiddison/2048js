{"version":3,"sources":["components/Tile/TileStyledComponents.js","components/Tile/index.js","components/Tile/Tile.jsx","components/Board/BoardStyledComponents.js","components/Board/index.js","components/Board/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["colors","2","4","8","16","32","64","128","256","512","1024","2048","fallback","Number","styled","span","TileBackground","div","props","number","Tile","useState","Math","floor","random","x","y","calcOffset","value","style","marginTop","marginLeft","Background","GridCell","GridRow","Board","tiles","map","tile","_index","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k+BAEA,IAGMA,EAAS,CACbC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,KAAM,UACNC,KAAM,UACNC,SAAU,WAMCC,EAASC,IAAOC,KAAV,KAINC,EAAiBF,IAAOG,IAAV,KAEL,SAAAC,GAAK,OATAC,EASuBD,EAAMC,QAR7C,KAAOnB,EAAM,SAAeA,EAAOmB,GADnB,IAAAA,KAUhB,SAAAD,GAAK,OACZA,EAAMC,OAAS,EA5Ba,UADD,aCAhBC,ECMF,WAAO,IAAD,EACWC,mBALfC,KAAKC,MAAsB,GAAhBD,KAAKE,UACf,EAAI,EAAI,GAGL,mBACVL,EADU,aAECE,mBAASC,KAAKC,MAAsB,EAAhBD,KAAKE,YAF1B,mBAEVC,EAFU,aAGCJ,mBAASC,KAAKC,MAAsB,EAAhBD,KAAKE,YAH1B,mBAGVE,EAHU,KASXC,GATW,KASE,SAAAC,GAAK,OAAY,IAARA,IAE5B,OACE,kBAACZ,EAAD,CACEa,MAAO,CAAEC,UAAWH,EAAWD,GAAIK,WAAYJ,EAAWF,IAC1DN,OAAQA,GAER,kBAAC,EAAD,KAASA,K,ofCtBf,IAGaa,EAAalB,IAAOG,IAAV,IAFF,qBAWRgB,EAAWnB,IAAOG,IAAV,IAZI,WAuBZiB,EAAUpB,IAAOG,IAAV,KCvBLkB,ECED,WAAO,IAAD,EACQd,mBAAS,CAAC,kBAAC,EAAD,MAAU,kBAAC,EAAD,QAD5B,mBACXe,EADW,UAGlB,OACE,kBAACJ,EAAD,KACGI,EAAMC,KAAI,SAACC,EAAMC,GAAP,OAAkBD,KAC7B,kBAACJ,EAAD,KACE,kBAACD,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,OAEF,kBAACC,EAAD,KACE,kBAACD,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,OAEF,kBAACC,EAAD,KACE,kBAACD,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,OAEF,kBAACC,EAAD,KACE,kBAACD,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,SCnBOO,EATH,WACV,OACE,yBAAKC,UAAU,kBACb,oCACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.19487749.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst LOW_NUMBERS_TEXT_COLOR = \"#756e66\";\nconst HIGH_NUMBERS_TEXT_COLOR = \"#f9f6f3\";\n\nconst colors = {\n  2: \"#ece4db\",\n  4: \"#ebe0cb\",\n  8: \"#e7b482\",\n  16: \"#e6996d\",\n  32: \"#e48367\",\n  64: \"#e26848\",\n  128: \"#e7d07f\",\n  256: \"#e7cd73\",\n  512: \"#ecd163\",\n  1024: \"#dcbb43\",\n  2048: \"#e5c542\",\n  fallback: \"#85d698\"\n};\n\nconst calcTileBackground = number =>\n  number > 2048 ? colors[\"fallback\"] : colors[number];\n\nexport const Number = styled.span`\n  font-size: 32px;\n`;\n\nexport const TileBackground = styled.div`\n  align-items: center;\n  background-color: ${props => calcTileBackground(props.number)};\n  color: ${props =>\n    props.number > 4 ? HIGH_NUMBERS_TEXT_COLOR : LOW_NUMBERS_TEXT_COLOR};\n  border-radius: 1px;\n  display: flex;\n  height: 100px;\n  justify-content: center;\n  margin: 0 20px 20px 0;\n  position: absolute;\n  width: 100px;\n\n  @keyframes appear {\n    0% {\n      height: 80px;\n      width: 80px;\n    }\n    25% {\n      height: 85px;\n      width: 85px;\n    }\n    50% {\n      height: 90px;\n      width: 90px;\n    }\n    100% {\n      height: 100px;\n      width: 100px;\n    }\n  }\n\n  animation-name: appear;\n  animation-duration: 0.3s;\n\n  transition: margin 0.3s ease;\n`;\n","import Tile from \"./Tile\";\n\nexport default Tile;\n","import React, { useState } from \"react\";\nimport { Number, TileBackground } from \"./TileStyledComponents\";\n\nconst calcInitialNumber = () => {\n  const odds = Math.floor(Math.random() * 10);\n  return odds > 7 ? 4 : 2;\n};\n\nconst Tile = () => {\n  const [number, setNumber] = useState(calcInitialNumber());\n  const [x, setX] = useState(Math.floor(Math.random() * 4));\n  const [y, setY] = useState(Math.floor(Math.random() * 4));\n\n  const levelUp = () => {\n    setNumber(number * 2);\n  };\n\n  const calcOffset = value => value * 120;\n\n  return (\n    <TileBackground\n      style={{ marginTop: calcOffset(y), marginLeft: calcOffset(x) }}\n      number={number}\n    >\n      <Number>{number}</Number>\n    </TileBackground>\n  );\n};\n\nexport default Tile;\n","import styled from \"styled-components\";\n\nconst BACKGROUND_COLOR = \"#cac1b6\";\nconst BORDER_COLOR = \"#b8aea2\";\n\nexport const Background = styled.div`\n  background-color: ${BORDER_COLOR}\n  border: 20px solid ${BORDER_COLOR};\n  border-radius: 6px;\n  height: 500px;\n  position: relative;\n  width: 500px;\n`;\n\nexport const GridCell = styled.div`\n  background-color: ${BACKGROUND_COLOR};\n  height: 100px;\n  margin: 0 20px 20px 0;\n  width: 100px;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n`;\n\nexport const GridRow = styled.div`\n  display: flex;\n`;\n","import Board from \"./Board\";\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport Tile from \"../Tile\";\nimport { Background, GridCell, GridRow } from \"./BoardStyledComponents\";\n\nconst Board = () => {\n  const [tiles, setTiles] = useState([<Tile />, <Tile />]);\n\n  return (\n    <Background>\n      {tiles.map((tile, _index) => tile)}\n      <GridRow>\n        <GridCell />\n        <GridCell />\n        <GridCell />\n        <GridCell />\n      </GridRow>\n      <GridRow>\n        <GridCell />\n        <GridCell />\n        <GridCell />\n        <GridCell />\n      </GridRow>\n      <GridRow>\n        <GridCell />\n        <GridCell />\n        <GridCell />\n        <GridCell />\n      </GridRow>\n      <GridRow>\n        <GridCell />\n        <GridCell />\n        <GridCell />\n        <GridCell />\n      </GridRow>\n    </Background>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./components\";\n\nconst App = () => {\n  return (\n    <div className=\"game-container\">\n      <h1>2048</h1>\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}